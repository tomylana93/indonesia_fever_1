local transf = require "transf"
local vec3 = require "vec3"
local modulesutil = require "modulesutil"

local constructionutil = require "constructionutil"

--Begin Generated
--End Generated

local generatedData = {
	["era_a_perron_10_assets_name"] = {
		models = {
			["station/rail/asset/cargo_name_board.mdl"] = {
				{ 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 17.50000, 0.00000, 0.80000, 1.00000 },
			},
		},
	},
	["era_a_perron_10_assets_1"] = {
		models = {
			["station/rail/asset/cargo_lamps.mdl"] = {
				{ 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 10.00000, 0.00000, 0.80000, 1.00000 },
				{ 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 30.00000, 0.00000, 0.80000, 1.00000 },
			},
			["station/rail/asset/cargo_speakers.mdl"] = {
				{ 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 22.50000, 0.00000, 0.80000, 1.00000 },
			},
		},
	},
}

function data()

return { 
	availability = {
		yearFrom = 0,
		yearTo = 1920,
	},
	category = {
		categories = { "platforms", },
	},
	cost = {
		price = 18000,
	},
	description = {
		name = _("Cargo platform"),
		description = _("Platform for cargo."),
		icon = "ui/construction/station/rail/modular_station/platform_cargo_era_a.tga"
	},
	type = "cargo_platform",
	order = {
		value = 4000,
	},
	-- buildMode = "MULTI",
	metadata = {
		platform = true,
		cargo_platform = true,
	},
	
	updateFn = function(result, transform, tag, slotId, addModelFn)
	
		local faces = {
			{5.0,  -20.0, 0.0, 1.0},
			{5.0,  20.0,  0.0, 1.0},
			{-5.0, 20.0,  0.0, 1.0},
			{-5.0, -20.0, 0.0, 1.0},
		}
		modulesutil.TransformFaces(transform, faces)
		local faces2 = { type = "EQUAL", faces = {  faces } }
		table.insert(result.terrainAlignmentLists, faces2)
		
		table.insert(result.colliders, {
			type = "BOX",
			transf = transform,
			params = {
				halfExtents = { 5, 20, 2 },
			}
		})
			
		table.insert(result.groundFaces, {  
			face = faces,
			modes = {
				{
					type = "FILL",
					key = "shared/gravel_03.gtex.lua"
				},
				{
					type = "STROKE_OUTER",
					key = "street_border.lua"
				},
			},
		})
	
		result.models[#result.models + 1] = { 
			id = "station/rail/era_a/tn_underground_connection.mdl",
			transf = transf.mul(transform, transf.transl(vec3.new(-2.5, 0, 0))),
			tag = tag
		}
		result.models[#result.models + 1] = { 
			id = "station/rail/era_a/tn_underground_connection.mdl",
			transf = transf.mul(transform, transf.transl(vec3.new(2.5, 0, 0))),
			tag = tag
		}

		local modelsConfig = {
			perron = "station/rail/era_a/perron_10.mdl",
			endPerron = "station/rail/era_a/perron_10_end.mdl",
			halfEndPerron = "station/rail/era_a/perron_5_end.mdl",
		}
		addModelFn(modelsConfig.perron, transf.rotZTransl(math.rad(90), vec3.new(0, -20, 0)))
		
		local coords = result.GetCoord(slotId)
		local i = coords[1]
		local j = coords[2]
		
		local tran = transf.mul(transform, transf.rotZTransl(math.rad(90), vec3.new(0, -20, 0)))
		
		local num1 = #result.models
		local call = function(left, n, station)
			local stationS = tostring(station)
			result.labelText[num1 + 0] = {stationS,stationS}
		end
		result.addPlatformCallback(i, j, call)
		result.addPlatformCallback(i+1, j, call)
		constructionutil.addModels(generatedData["era_a_perron_10_assets_name"], result.models, tran, tag)
		constructionutil.addModels(generatedData["era_a_perron_10_assets_1"], result.models, tran, tag)
		
		local nextM = result.GetModuleAt(i+1,j-1)
		local nextM2 = result.GetModuleAt(i,j-1)
		local cb1 = (nextM and (nextM.metadata.passenger_platform or nextM.metadata.cargo_platform)) or result.connector[1000 * (i+1) + 100 * (j-1) + 7]
		local cb2 = (nextM2 and (nextM2.metadata.passenger_platform or nextM2.metadata.cargo_platform)) or result.connector[1000 * (i) + 100 * (j-1) + 7]
		if not cb1 and not cb2 then
			addModelFn(modelsConfig.endPerron, transf.rotZTransl(math.rad(-90), vec3.new(0, -20, 0)))
		elseif not cb1 then
			addModelFn(modelsConfig.halfEndPerron, transf.rotZTransl(math.rad(-90), vec3.new(2.5, -20, 0)))
		elseif not cb2 then
			addModelFn(modelsConfig.halfEndPerron, transf.rotZTransl(math.rad(-90), vec3.new(-2.5, -20, 0)))
		end

		local prevM = result.GetModuleAt(i+1,j+1)
		local prevM2 = result.GetModuleAt(i,j+1)
		local ca1 = (prevM and (prevM.metadata.passenger_platform or prevM.metadata.cargo_platform)) or result.connector[1000 * (i+1) + 100 * (j+1) + 0]
		local ca2 = (prevM2 and (prevM2.metadata.passenger_platform or prevM2.metadata.cargo_platform)) or result.connector[1000 * (i) + 100 * (j+1) + 0]
		if not ca1 and not ca2 then
			addModelFn(modelsConfig.endPerron, transf.rotZTransl(math.rad(90), vec3.new(0, 20, 0)))
		elseif not ca1 then
			addModelFn(modelsConfig.halfEndPerron, transf.rotZTransl(math.rad(90), vec3.new(2.5, 20, 0)))
		elseif not ca2 then
			addModelFn(modelsConfig.halfEndPerron, transf.rotZTransl(math.rad(90), vec3.new(-2.5, 20, 0)))
		end
	end,
	
	getModelsFn = function()
		local modelsConfig = {
			perron = "station/rail/era_a/perron_10.mdl",
			endPerron = "station/rail/era_a/perron_10_end.mdl",
			halfEndPerron = "station/rail/era_a/perron_5_end.mdl",
		}
		
		local result = {
			{ 
				id = modelsConfig.perron,
				transf = transf.rotZTransl(math.rad(90), vec3.new(0, -20, 0)),
			},
			{ 
				id = modelsConfig.endPerron,
				transf = transf.rotZTransl(math.rad(-90), vec3.new(0,-20,0)),
			},
			{ 
				id = modelsConfig.endPerron,
				transf = transf.rotZTransl(math.rad(90), vec3.new(0,20,0)),
			},
		}
		
		return result
	end
}

end
